apiVersion: apps/v1
kind: Deployment
{{- with .Values.database }}
metadata:
  name: {{ .hostName }}
  {{- if $.Release.Namespace }}
  namespace: {{ $.Release.Namespace }}
  {{- else }}
  namespace: {{ $.Values.commonConfig.namespace }}
  {{- end }}
  labels:
    app: {{ .hostName }}
spec:
  replicas: {{ .replicaCount }}
  selector:
    matchLabels:
      app: {{ .hostName }}
  template:
    metadata:
      labels:
        app: {{ .hostName }}
    spec:
        containers:
          - name: {{ .hostName }}
            image: "{{ .image.repository }}:{{ .image.tag }}"
            imagePullPolicy: {{ .image.pullPolicy }}
            ports:
              - name: "tcp-port"
                containerPort: {{ .service.containerPort }}
                protocol: {{ .service.protocol }}

            envFrom:
              - configMapRef:
                  name: "{{ $.Values.database.hostName }}-configmap"
              - secretRef:
                  name: "{{ $.Values.database.hostName }}-secret"

            {{- with .resources }}
            resources:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            volumeMounts:
              - name: mysql-persistent-storage
                mountPath: {{ .persistence.mountPath }}
              - name: initdb
                mountPath: {{ .persistence.initDbMountPath }}
                #subPath: {{ .persistence.initDbSubPath }}
        volumes:
            - name: mysql-persistent-storage
              persistentVolumeClaim:
                claimName: "{{ .hostName }}-pvc"
            - name: initdb
              configMap:
                name: "{{ .hostName }}-dbinit-configmap"
{{- end }}
      
