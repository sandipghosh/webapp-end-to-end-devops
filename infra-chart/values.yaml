commonConfig:
  namespace: webapp
  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http

database:
  replicaCount: 1
  hostName: webapp-database
  image: 
    repository: sandipdockerrepo/webapp-database
    pullPolicy: IfNotPresent
    tag: "latest"
  service: 
    type: ClusterIP
    containerPort: 3306
    exposePort: 3306
    protocol: TCP
  environmentVariables:
    MYSQL_DATABASE: app_db
    MYSQL_USER: sandip
    MYSQL_PASSWORD: sandev@1984
    MYSQL_ROOT_PASSWORD: root
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    storageClass: standard
    mountPath: "/var/lib/mysql"
    #initDbMountPath: "/docker-entrypoint-initdb.d/init.sql"
    initDbMountPath: "/docker-entrypoint-initdb.d"
    initDbSubPath: "init.sql"
    size: 1Gi
  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"
    limits:
      cpu: "1"
      memory: "1Gi"

backend:
  replicaCount: 1
  hostName: webapp-backend
  image: 
    repository: sandipdockerrepo/webapp-backend
    pullPolicy: IfNotPresent
    tag: "latest"
  service: 
    type: ClusterIP
    containerPort: 80
    exposePort: 8000
    protocol: TCP
  environmentVariables:
    ASPNETCORE_ENVIRONMENT: Development
    WEBAPP_DB_HOST: "{{ .Values.database.hostName }}-service"
    WEBAPP_DB_PORT: 3306
    WEBAPP_DB_NAME: app_db
    WEBAPP_DB_USER: sandip
    WEBAPP_DB_PASSWORD: sandev@1984
    WEBAPP_CLIENT_URL: "http://{{ .Values.ingress.host }}:{{ .Values.ingress.exposedPort }}{{ (index .Values.ingress.frontend 0).hostPath}}"
    #WEBAPP_CLIENT_URL: "http://{{ .Values.frontend.hostName }}:{{ .Values.frontend.service.exposePort }}{{.Values.frontend.service.exposePath}}"
  command:
    - /bin/sh
    - -c
  args: 
    dotnet webapp.dll

  # Runs first, ensures DB is reachable before marking the backend pod for readiness/liveness checks.
  startupProbe:
    enabled: true
    config:
      exec:
        command:
          - sh
          - -c
          - >
            nc -z {{ .Values.database.hostName }}-service {{ .Values.database.service.exposePort }}
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 30

  # Keeps the pod out of Service endpoints until DB is accessible.
  readinessProbe:
    enabled: true
    config:
      exec:
        command:
          - sh
          - -c
          - >
            nc -z {{ .Values.database.hostName }}-service {{ .Values.database.service.exposePort }}
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3

  # Ensures pod is restarted if it loses DB connectivity later.
  livenessProbe: 
    enabled: true
    config: 
      exec:
        command:
          - sh
          - -c
          - >
            nc -z {{ .Values.database.hostName }}-service {{ .Values.database.service.exposePort }}
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 3

  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "1"
      memory: "1Gi"

frontend:
  replicaCount: 1
  hostName: webapp-frontend
  image: 
    repository: sandipdockerrepo/webapp-frontend
    pullPolicy: IfNotPresent
    tag: "latest"
  service: 
    type: ClusterIP
    containerPort: 80
    exposePort: 80
    protocol: TCP
  persistence:
    enabled: true
    mountPath: "/usr/share/nginx/html/assets/env.js"
    # the subPath field in a volume mount allows you to mount a specific file or 
    # sub-directory from a volume into a container, instead of mounting the entire volume path.
    subPath: "env.js"
  envJsContent: |
    (function(window) {
        window.__env = window.__env || {};

        // Default values 
        window.__env.apiUrl = 'http://{{ .Values.ingress.host }}:{{ .Values.ingress.exposedPort }}{{ (index .Values.ingress.backend 0).hostPath}}'; 
        window.__env.debug = false;
    })(this);
  applyLivenessProbe: false
  applyReadinessProbe: false
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "256Mi"

ingress:
  enabled: true
  name: webapp-ingress
  host: webapp.local
  exposedPort: 8585
  backend:
    - hostPath: "/api"
      hostPort: "{{ .Values.backend.service.exposePort }}"
      hostService: "{{ .Values.backend.hostName }}-service"
    - hostPath: "/swagger"
      hostPort: "{{ .Values.backend.service.exposePort }}"
      hostService: "{{ .Values.backend.hostName }}-service"
  frontend:
    - hostPath: "/"
      hostPort: "{{ .Values.frontend.service.exposePort }}"
      hostService: "{{ .Values.frontend.hostName }}-service"

hpa:
  enabled: true
  backend:
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilization: 30
    targetMemoryUtilization: 30
